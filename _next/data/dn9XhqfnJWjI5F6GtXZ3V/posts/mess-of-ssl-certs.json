{"pageProps":{"title":"SSL Certs 真的很烦","content":"<h2 id=\"前言\">前言</h2>\n<p>今天被分配了一个任务，需要在一个Java容器里用X.509证书调用另外一个服务器的RESTful API。期间经历了无数次证书无法验证的挫折，鼓捣了好久才终于成功。觉得还是有必要梳理一下自己的理解。</p>\n<h2 id=\"什么是ssl-certs\">什么是SSL Certs</h2>\n<p>由CA(Certificate Authority)签发的数据凭证。用于验证服务器的身份。服务器的拥有者需要妥善保存证书，并且在客户端请求的时候提供相关证书。一旦浏览器发现证书有误，如域名错误，时间不正确，过期等，会有相关的提示警告请求者。</p>\n<p>证书如果泄露，黑客可以利用被泄露的证书做很多坏事情。</p>\n<p>有时候，SSL Certs也可以由CA签发给客户端，以让服务器验证客户端的身份。</p>\n<p>由此可见，CA必须是一个大家都信任的实体，通常又一些大公司提供（如GoDaddy, AWS，阿里等）。\nCA也可以自己建立，由自建CA签发的证书叫做Self-Signed-Certs。一般来说遇见Self-Signed-Certs浏览器都会有警告，必须将其加入系统信任列表里方可正常使用。</p>\n<h2 id=\"ssl-certs-的格式\">SSL Certs 的格式</h2>\n<p>SSL Certs的格式有很多种，什么PEM, CER, DER，JKS, PCKS12，有的时候光听到这几个似曾相识的名字就让人头都大了。</p>\n<p>小朋友如果你有很多问题，不妨看看以下表格</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th align=\"left\">内容</th>\n<th align=\"left\">干嘛的</th>\n<th>可保存证书？</th>\n<th>可保存密钥？</th>\n<th>常用于</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.DER</td>\n<td align=\"left\">二进制</td>\n<td align=\"left\">一种转码的方法</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>.CER</td>\n<td align=\"left\">二进制</td>\n<td align=\"left\">指代证书</td>\n<td>是</td>\n<td>否</td>\n<td></td>\n</tr>\n<tr>\n<td>.CRT</td>\n<td align=\"left\">明文或二进制皆可</td>\n<td align=\"left\">指代证书</td>\n<td>是</td>\n<td>否</td>\n<td></td>\n</tr>\n<tr>\n<td>.PEM</td>\n<td align=\"left\">明文</td>\n<td align=\"left\">一种转码方法</td>\n<td>是</td>\n<td>是</td>\n<td>Apache/Nginx</td>\n</tr>\n<tr>\n<td>.KEY</td>\n<td align=\"left\">明文</td>\n<td align=\"left\">其实就是PEM，只是改成.KEY易于区分密钥和证书</td>\n<td>-</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>.CSR</td>\n<td align=\"left\">二进制</td>\n<td align=\"left\">证书签名请求(Cert Signing Request)</td>\n<td>-</td>\n<td>-</td>\n<td>递交给CA以获取公钥证书(x.509)</td>\n</tr>\n<tr>\n<td>.pfx</td>\n<td align=\"left\">二进制</td>\n<td align=\"left\">Predecessor of PKCS#12</td>\n<td>必须</td>\n<td>必须</td>\n<td>Windows IIS</td>\n</tr>\n<tr>\n<td>.p12/.pkcs12</td>\n<td align=\"left\">二进制</td>\n<td align=\"left\">PKCS#12，一般具有密码保护</td>\n<td>必须</td>\n<td>必须</td>\n<td>Non-Windows</td>\n</tr>\n<tr>\n<td>JKS</td>\n<td align=\"left\">二进制</td>\n<td align=\"left\">Java KeyStore，一般具有密码保护</td>\n<td>可以，使用Alias存取，可以用Keypass保护</td>\n<td>可以，使用Alias存取，可以用Keypass保护</td>\n<td>Java 程序 如 Tomcat</td>\n</tr>\n</tbody></table>\n<h3 id=\"更多关于pem格式\">更多关于PEM格式</h3>\n<p>PEM是一种可以把二进制转码成明文的方法，一般来说他的样子如下</p>\n<pre><code>-----BEGIN CERTIFICATE-----\n&lt;Base64 encoded contents&gt;\n-----END CERTIFICATE-----</code></pre>\n<p>除了证书，他也可以转码密钥（公钥和私钥），或者是完成的证书链:同时含有证书，密钥和根证书。</p>\n<h3 id=\"什么是x509\">什么是X.509</h3>\n<p>X.509是一种公钥证书的规范。制造的过程一般如下：</p>\n<ol>\n<li>生成私钥</li>\n<li>用私钥生成<code>.CSR</code>文件</li>\n<li>把公钥和<code>.CSR</code>交给提供数字签名的CA。如没有CA，也可以自己建立，这样生成的Cert一般叫做Self-Signed Cert</li>\n<li>CA返还的证书+公钥一般用.p12保存，因为其支持密码。</li>\n</ol>\n<h2 id=\"java相关\">Java相关</h2>\n<h3 id=\"什么是keystore\">什么是KeyStore</h3>\n<p>KeyStore (也就是.JKS后缀的一个文件)是用来存储私钥和X.509证书的。\n我们可以通过<code>javax.net.ssl.keyStore=path/to/trustStore.jks</code>来指定JVM寻找TrustStore的位置。</p>\n<p><b>可以说，KeyStore一般用来存储自身的身份</b></p>\n<h3 id=\"什么是trust-store\">什么是Trust Store</h3>\n<p>Trust Store就是用来存贮由CA颁发的用来验证服务器有效性的证书的</p>\n<p>TrustStore是用来\n我们可以通过<code>-Djavax.net.ssl.trustStore=path/to/trustStore.jks</code>来指定JVM寻找TrustStore的位置</p>\n<p>当Java程序没有用上述指令指定TrustStore的时候，会默认寻找<code>JAVAHOME/jre/secure/cacerts</code>这个位置的文件。</p>\n<p><b>可以说，KeyStore一般用来存储服务器的身份</b></p>\n<p>KeyStore和TrustStore只是概念上的问题，实际上他们可以是同一个文件，但是<b>强烈</b>不建议这么做，原因是KeyStore一般用来存放私密性高的信息如个人的x509证书和私钥，而TrustStore则用来存放公共的信息如不同网站的SSL证书。</p>\n<p>未完待续。。。</p>\n","date":"2021/11/22"},"__N_SSG":true}